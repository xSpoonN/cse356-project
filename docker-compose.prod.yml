networks:
  agent_network:
    driver: overlay
    attachable: true

volumes:
  osm-data:
  mongo-data:
  mongo-config:
  portainer_data:

services:
  nginx:
    container_name: nginx
    image: nginx:latest
    platform: linux/amd64
    ports:
      - '80:80'
    volumes:
      - './docker/nginx.conf:/etc/nginx/nginx.conf'
    depends_on:
      - frontend
      - backend
    deploy:
      placement:
        constraints:
          - node.role == manager
    logging:
      driver: 'fluentd'
      options:
        tag: nginx
        fluentd-address: fluentd:24224
        fluentd-async-connect: 'true'

  fluentd:
    container_name: fluentd
    build:
      context: ./docker/
      dockerfile: ./fluentd.Dockerfile
    image: ktao87/cse356:fluentd
    platform: linux/amd64
    volumes:
      - ./logs/:/var/log/fluentd/
    ports:
      - '24224:24224'
      - '24224:24224/udp'
    deploy:
      placement:
        constraints:
          - node.role == manager

  frontend:
    container_name: frontend
    build:
      context: ./frontend/
      dockerfile: ../docker/frontend.prod.Dockerfile
    image: ktao87/cse356:frontend
    platform: linux/amd64
    depends_on:
      - fluentd
      - backend
      - search
    restart: always
    deploy:
      placement:
        constraints:
          - node.role == manager

  backend:
    container_name: backend
    build:
      context: ./backend/
      dockerfile: ../docker/backend.prod.Dockerfile
    image: ktao87/cse356:backend
    platform: linux/amd64
    depends_on:
      - tile-server
      - mongo
    restart: always
    extra_hosts:
      host.docker.internal: host-gateway
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
      placement:
        constraints:
          - node.role == manager
    logging:
      driver: 'fluentd'
      options:
        tag: backend
        fluentd-address: fluentd:24224
        fluentd-async-connect: 'true'

  mongo:
    container_name: mongo
    image: mongo:latest
    platform: linux/amd64
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb
    environment:
      MONGO_INITDB_ROOT_USERNAME: 'root'
      MONGO_INITDB_ROOT_PASSWORD: 'password'
      MONGO_INITDB_DATABASE: 'user'
    restart: always
    deploy:
      placement:
        constraints:
          - node.role == manager

  tile-server:
    container_name: tile-server
    build:
      context: ./docker/
      dockerfile: ./tile.Dockerfile
    depends_on:
      - db
    image: ktao87/cse356:tile-server
    platform: linux/amd64
    restart: always
    deploy:
      placement:
        constraints:
          - node.hostname == tile-server

  tile-cache:
    container_name: tile-cache
    image: memcached:latest
    platform: linux/amd64
    command: '-m 512 -I 10m'
    deploy:
      placement:
        constraints:
          - node.hostname == cache

  search:
    container_name: search_microservice
    build:
      context: ./search/
      dockerfile: ../docker/search.Dockerfile
    image: ktao87/cse356:search
    platform: linux/amd64
    depends_on:
      - db
    restart: always
    deploy:
      placement:
        constraints:
          - node.role == manager

  db:
    container_name: db
    build:
      context: ./docker/
      dockerfile: ./db.Dockerfile
    image: ktao87/cse356:db
    platform: linux/amd64
    volumes:
      - osm-data:/var/lib/postgresql/14/main
      - /backup:/backup
    restart: always
    deploy:
      placement:
        constraints:
          - node.hostname == db

  agent:
    image: portainer/agent:2.19.4
    platform: linux/amd64
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - agent_network
    deploy:
      mode: global
      placement:
        constraints:
          - node.platform.os == linux

  portainer:
    image: portainer/portainer-ce:2.19.4
    platform: linux/amd64
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    ports:
      - '9443:9443'
      - '9000:9000'
      - '8000:8000'
    volumes:
      - portainer_data:/data
    networks:
      - agent_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
