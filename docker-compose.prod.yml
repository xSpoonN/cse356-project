x-logging-options: &logging
  logging:
    driver: 'fluentd'
    options:
      tag: '{{.Name}}'
      fluentd-address: fluentd:24224
      fluentd-async-connect: 'true'

networks:
  proxy:
    driver: overlay
    attachable: true
  agent_network:
    driver: overlay
    attachable: true
  outside:
    external:
      name: 'host'

volumes:
  osm-data:
  routing-data:
  mongo-data:
  mongo-config:
  import-data:
  portainer_data:

services:
  reverse_proxy:
    container_name: nginx
    image: nginx:latest
    ports:
      - '80:80'
    volumes:
      - './docker/nginx.conf:/etc/nginx/nginx.conf'
      - '/var/run/docker.sock:/tmp/docker.sock:ro'
      - './vhost.d:/etc/nginx/vhost.d:ro'
    depends_on:
      - frontend
      - backend
      - portainer
      - glances
    deploy:
      placement:
        constraints:
          - node.role == manager
    <<: *logging

  frontend:
    container_name: frontend
    build:
      context: ./frontend/
      dockerfile: ../docker/frontend.prod.Dockerfile
    image: 127.0.0.1:5000/next
    depends_on:
      - fluentd
      - backend
    restart: always
    networks:
      - outside
    deploy:
      placement:
        constraints:
          - node.role == manager

  fluentd:
    container_name: fluentd
    build:
      context: ./docker/
      dockerfile: ./fluentd.Dockerfile
    image: 127.0.0.1:5000/fluentd
    volumes:
      - ./logs/:/var/log/fluentd/
    ports:
      - '24224:24224'
      - '24224:24224/udp'
    deploy:
      placement:
        constraints:
          - node.role == manager

  backend:
    container_name: backend
    image: 127.0.0.1:5000/backend
    build:
      context: ./backend/
      dockerfile: ../docker/backend.prod.Dockerfile
    depends_on:
      - tile-server
      - pgrouting
      - mongo
    restart: always
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
      placement:
        constraints:
          - node.role == manager
    <<: *logging

  mongo:
    container_name: mongo
    image: mongo:latest
    ports:
      - '27017:27017'
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb
    environment:
      MONGO_INITDB_ROOT_USERNAME: 'root'
      MONGO_INITDB_ROOT_PASSWORD: 'password'
      MONGO_INITDB_DATABASE: 'user'
    restart: always
    deploy:
      placement:
        constraints:
          - node.role == manager

  tile-server:
    container_name: tile-server
    build:
      context: ./docker/
      dockerfile: ./tile-server.Dockerfile
    image: 127.0.0.1:5000/tile-server
    volumes:
      - osm-data:/data/database/
      - type: tmpfs
        target: /dev/shm
        tmpfs:
          size: 268435456 # 256MB
    environment:
      DOWNLOAD_PBF: https://grading.cse356.compas.cs.stonybrook.edu/data/us-northeast.osm.pbf
      THREADS: 4
    restart: always
    deploy:
      placement:
        constraints:
          - node.hostname == tile-server

  pgrouting:
    container_name: pgrouting
    image: pgrouting/pgrouting:latest
    volumes:
      - routing-data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: mysecretpassword
      POSTGRES_DB: routing
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 3s
      timeout: 5s
      retries: 10
    restart: always
    deploy:
      placement:
        constraints:
          - node.hostname == router

  db-import:
    image: 127.0.0.1:5000/db-import
    build:
      context: ./docker/
      dockerfile: ./db-import.Dockerfile
    container_name: db-import
    volumes:
      - import-data:/data
    restart: 'no'
    depends_on:
      - pgrouting
    deploy:
      restart_policy:
        condition: none
      placement:
        constraints:
          - node.hostname == router

  glances:
    image: nicolargo/glances:latest-full
    pid: 'host'
    privileged: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      TZ: America/New_York
      GLANCES_OPT: -C /glances/conf/glances.conf -w
    restart: always
    deploy:
      placement:
        constraints:
          - node.role == manager

  portainer-agent:
    image: portainer/agent:2.19.4
    networks:
      - agent_network
    environment:
      AGENT_CLUSTER_ADDR: tasks.portainer-agent
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    deploy:
      mode: global
      placement:
        constraints:
          - node.platform.os == linux

  portainer:
    image: portainer/portainer-ce:2.19.4
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    environment:
      - VIRTUAL_HOST=portainer.mygroup.cse356.compas.cs.stonybrook.edu
      - VIRTUAL_PORT=9000
    ports:
      - 8000:8000
    volumes:
      - portainer_data:/data
    networks:
      - proxy
      - agent_network
    deploy:
      placement:
        constraints:
          - node.role == manager
